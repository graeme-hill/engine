// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	controller.proto

It has these top-level messages:
	ValidateSnakeRequest
	ValidateSnakeResponse
	SnakeResponseStatus
	Score
	PopRequest
	PopResponse
	StatusRequest
	StatusResponse
	StartRequest
	StartResponse
	CreateRequest
	CreateResponse
	AddGameFrameRequest
	AddGameFrameResponse
	ListGameFramesRequest
	ListGameFramesResponse
	EndGameRequest
	EndGameResponse
	PingRequest
	PingResponse
	SnakeOptions
	Game
	GameFrame
	Point
	Snake
	Death
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ValidateSnakeRequest struct {
	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (m *ValidateSnakeRequest) Reset()                    { *m = ValidateSnakeRequest{} }
func (m *ValidateSnakeRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateSnakeRequest) ProtoMessage()               {}
func (*ValidateSnakeRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{0} }

func (m *ValidateSnakeRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type ValidateSnakeResponse struct {
	StartStatus *SnakeResponseStatus `protobuf:"bytes,1,opt,name=StartStatus" json:"StartStatus,omitempty"`
	MoveStatus  *SnakeResponseStatus `protobuf:"bytes,2,opt,name=MoveStatus" json:"MoveStatus,omitempty"`
	EndStatus   *SnakeResponseStatus `protobuf:"bytes,3,opt,name=EndStatus" json:"EndStatus,omitempty"`
	PingStatus  *SnakeResponseStatus `protobuf:"bytes,4,opt,name=PingStatus" json:"PingStatus,omitempty"`
}

func (m *ValidateSnakeResponse) Reset()                    { *m = ValidateSnakeResponse{} }
func (m *ValidateSnakeResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateSnakeResponse) ProtoMessage()               {}
func (*ValidateSnakeResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{1} }

func (m *ValidateSnakeResponse) GetStartStatus() *SnakeResponseStatus {
	if m != nil {
		return m.StartStatus
	}
	return nil
}

func (m *ValidateSnakeResponse) GetMoveStatus() *SnakeResponseStatus {
	if m != nil {
		return m.MoveStatus
	}
	return nil
}

func (m *ValidateSnakeResponse) GetEndStatus() *SnakeResponseStatus {
	if m != nil {
		return m.EndStatus
	}
	return nil
}

func (m *ValidateSnakeResponse) GetPingStatus() *SnakeResponseStatus {
	if m != nil {
		return m.PingStatus
	}
	return nil
}

type SnakeResponseStatus struct {
	Message    string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Errors     []string `protobuf:"bytes,2,rep,name=Errors" json:"Errors,omitempty"`
	Time       int32    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Raw        string   `protobuf:"bytes,4,opt,name=raw,proto3" json:"raw,omitempty"`
	StatusCode int32    `protobuf:"varint,5,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Score      *Score   `protobuf:"bytes,6,opt,name=score" json:"score,omitempty"`
}

func (m *SnakeResponseStatus) Reset()                    { *m = SnakeResponseStatus{} }
func (m *SnakeResponseStatus) String() string            { return proto.CompactTextString(m) }
func (*SnakeResponseStatus) ProtoMessage()               {}
func (*SnakeResponseStatus) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{2} }

func (m *SnakeResponseStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SnakeResponseStatus) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *SnakeResponseStatus) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SnakeResponseStatus) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *SnakeResponseStatus) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *SnakeResponseStatus) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type Score struct {
	ChecksPassed int32 `protobuf:"varint,1,opt,name=checksPassed,proto3" json:"checksPassed,omitempty"`
	ChecksFailed int32 `protobuf:"varint,2,opt,name=checksFailed,proto3" json:"checksFailed,omitempty"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{3} }

func (m *Score) GetChecksPassed() int32 {
	if m != nil {
		return m.ChecksPassed
	}
	return 0
}

func (m *Score) GetChecksFailed() int32 {
	if m != nil {
		return m.ChecksFailed
	}
	return 0
}

type PopRequest struct {
}

func (m *PopRequest) Reset()                    { *m = PopRequest{} }
func (m *PopRequest) String() string            { return proto.CompactTextString(m) }
func (*PopRequest) ProtoMessage()               {}
func (*PopRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{4} }

type PopResponse struct {
	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *PopResponse) Reset()                    { *m = PopResponse{} }
func (m *PopResponse) String() string            { return proto.CompactTextString(m) }
func (*PopResponse) ProtoMessage()               {}
func (*PopResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{5} }

func (m *PopResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PopResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type StatusRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{6} }

func (m *StatusRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type StatusResponse struct {
	Game      *Game      `protobuf:"bytes,1,opt,name=Game" json:"Game,omitempty"`
	LastFrame *GameFrame `protobuf:"bytes,2,opt,name=LastFrame" json:"LastFrame,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{7} }

func (m *StatusResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *StatusResponse) GetLastFrame() *GameFrame {
	if m != nil {
		return m.LastFrame
	}
	return nil
}

type StartRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{8} }

func (m *StartRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{9} }

type CreateRequest struct {
	Width                   int32           `protobuf:"varint,1,opt,name=Width,proto3" json:"Width,omitempty"`
	Height                  int32           `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Food                    int32           `protobuf:"varint,3,opt,name=Food,proto3" json:"Food,omitempty"`
	Snakes                  []*SnakeOptions `protobuf:"bytes,4,rep,name=Snakes" json:"Snakes,omitempty"`
	MaxTurnsToNextFoodSpawn int32           `protobuf:"varint,5,opt,name=MaxTurnsToNextFoodSpawn,proto3" json:"MaxTurnsToNextFoodSpawn,omitempty"`
	SnakeTimeout            int32           `protobuf:"varint,6,opt,name=SnakeTimeout,proto3" json:"SnakeTimeout,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{10} }

func (m *CreateRequest) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *CreateRequest) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CreateRequest) GetFood() int32 {
	if m != nil {
		return m.Food
	}
	return 0
}

func (m *CreateRequest) GetSnakes() []*SnakeOptions {
	if m != nil {
		return m.Snakes
	}
	return nil
}

func (m *CreateRequest) GetMaxTurnsToNextFoodSpawn() int32 {
	if m != nil {
		return m.MaxTurnsToNextFoodSpawn
	}
	return 0
}

func (m *CreateRequest) GetSnakeTimeout() int32 {
	if m != nil {
		return m.SnakeTimeout
	}
	return 0
}

type CreateResponse struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{11} }

func (m *CreateResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type AddGameFrameRequest struct {
	ID        string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GameFrame *GameFrame `protobuf:"bytes,2,opt,name=GameFrame" json:"GameFrame,omitempty"`
}

func (m *AddGameFrameRequest) Reset()                    { *m = AddGameFrameRequest{} }
func (m *AddGameFrameRequest) String() string            { return proto.CompactTextString(m) }
func (*AddGameFrameRequest) ProtoMessage()               {}
func (*AddGameFrameRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{12} }

func (m *AddGameFrameRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AddGameFrameRequest) GetGameFrame() *GameFrame {
	if m != nil {
		return m.GameFrame
	}
	return nil
}

type AddGameFrameResponse struct {
	Game *Game `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
}

func (m *AddGameFrameResponse) Reset()                    { *m = AddGameFrameResponse{} }
func (m *AddGameFrameResponse) String() string            { return proto.CompactTextString(m) }
func (*AddGameFrameResponse) ProtoMessage()               {}
func (*AddGameFrameResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{13} }

func (m *AddGameFrameResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type ListGameFramesRequest struct {
	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (m *ListGameFramesRequest) Reset()                    { *m = ListGameFramesRequest{} }
func (m *ListGameFramesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGameFramesRequest) ProtoMessage()               {}
func (*ListGameFramesRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{14} }

func (m *ListGameFramesRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ListGameFramesRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGameFramesRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListGameFramesResponse struct {
	Frames []*GameFrame `protobuf:"bytes,1,rep,name=Frames" json:"Frames,omitempty"`
	Count  int32        `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *ListGameFramesResponse) Reset()         { *m = ListGameFramesResponse{} }
func (m *ListGameFramesResponse) String() string { return proto.CompactTextString(m) }
func (*ListGameFramesResponse) ProtoMessage()    {}
func (*ListGameFramesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorController, []int{15}
}

func (m *ListGameFramesResponse) GetFrames() []*GameFrame {
	if m != nil {
		return m.Frames
	}
	return nil
}

func (m *ListGameFramesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type EndGameRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *EndGameRequest) Reset()                    { *m = EndGameRequest{} }
func (m *EndGameRequest) String() string            { return proto.CompactTextString(m) }
func (*EndGameRequest) ProtoMessage()               {}
func (*EndGameRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{16} }

func (m *EndGameRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type EndGameResponse struct {
}

func (m *EndGameResponse) Reset()                    { *m = EndGameResponse{} }
func (m *EndGameResponse) String() string            { return proto.CompactTextString(m) }
func (*EndGameResponse) ProtoMessage()               {}
func (*EndGameResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{17} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{18} }

type PingResponse struct {
	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{19} }

func (m *PingResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type SnakeOptions struct {
	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	URL      string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	ID       string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	HeadType string `protobuf:"bytes,4,opt,name=HeadType,proto3" json:"HeadType,omitempty"`
	TailType string `protobuf:"bytes,5,opt,name=TailType,proto3" json:"TailType,omitempty"`
}

func (m *SnakeOptions) Reset()                    { *m = SnakeOptions{} }
func (m *SnakeOptions) String() string            { return proto.CompactTextString(m) }
func (*SnakeOptions) ProtoMessage()               {}
func (*SnakeOptions) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{20} }

func (m *SnakeOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SnakeOptions) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *SnakeOptions) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SnakeOptions) GetHeadType() string {
	if m != nil {
		return m.HeadType
	}
	return ""
}

func (m *SnakeOptions) GetTailType() string {
	if m != nil {
		return m.TailType
	}
	return ""
}

type Game struct {
	ID                      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Status                  string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Width                   int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height                  int32  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
	SnakeTimeout            int32  `protobuf:"varint,6,opt,name=SnakeTimeout,proto3" json:"SnakeTimeout,omitempty"`
	Mode                    string `protobuf:"bytes,8,opt,name=Mode,proto3" json:"Mode,omitempty"`
	MaxTurnsToNextFoodSpawn int32  `protobuf:"varint,9,opt,name=MaxTurnsToNextFoodSpawn,proto3" json:"MaxTurnsToNextFoodSpawn,omitempty"`
	TurnsSinceLastFoodSpawn int32  `protobuf:"varint,10,opt,name=TurnsSinceLastFoodSpawn,proto3" json:"TurnsSinceLastFoodSpawn,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{21} }

func (m *Game) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Game) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Game) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Game) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Game) GetSnakeTimeout() int32 {
	if m != nil {
		return m.SnakeTimeout
	}
	return 0
}

func (m *Game) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Game) GetMaxTurnsToNextFoodSpawn() int32 {
	if m != nil {
		return m.MaxTurnsToNextFoodSpawn
	}
	return 0
}

func (m *Game) GetTurnsSinceLastFoodSpawn() int32 {
	if m != nil {
		return m.TurnsSinceLastFoodSpawn
	}
	return 0
}

type GameFrame struct {
	Turn   int32    `protobuf:"varint,1,opt,name=Turn,proto3" json:"Turn,omitempty"`
	Food   []*Point `protobuf:"bytes,2,rep,name=Food" json:"Food,omitempty"`
	Snakes []*Snake `protobuf:"bytes,3,rep,name=Snakes" json:"Snakes,omitempty"`
}

func (m *GameFrame) Reset()                    { *m = GameFrame{} }
func (m *GameFrame) String() string            { return proto.CompactTextString(m) }
func (*GameFrame) ProtoMessage()               {}
func (*GameFrame) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{22} }

func (m *GameFrame) GetTurn() int32 {
	if m != nil {
		return m.Turn
	}
	return 0
}

func (m *GameFrame) GetFood() []*Point {
	if m != nil {
		return m.Food
	}
	return nil
}

func (m *GameFrame) GetSnakes() []*Snake {
	if m != nil {
		return m.Snakes
	}
	return nil
}

type Point struct {
	X int32 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{23} }

func (m *Point) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Snake struct {
	ID       string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	URL      string   `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Body     []*Point `protobuf:"bytes,4,rep,name=Body" json:"Body,omitempty"`
	Health   int32    `protobuf:"varint,5,opt,name=Health,proto3" json:"Health,omitempty"`
	Death    *Death   `protobuf:"bytes,6,opt,name=Death" json:"Death,omitempty"`
	Color    string   `protobuf:"bytes,7,opt,name=Color,proto3" json:"Color,omitempty"`
	HeadType string   `protobuf:"bytes,8,opt,name=HeadType,proto3" json:"HeadType,omitempty"`
	TailType string   `protobuf:"bytes,9,opt,name=TailType,proto3" json:"TailType,omitempty"`
}

func (m *Snake) Reset()                    { *m = Snake{} }
func (m *Snake) String() string            { return proto.CompactTextString(m) }
func (*Snake) ProtoMessage()               {}
func (*Snake) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{24} }

func (m *Snake) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Snake) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Snake) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Snake) GetBody() []*Point {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Snake) GetHealth() int32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *Snake) GetDeath() *Death {
	if m != nil {
		return m.Death
	}
	return nil
}

func (m *Snake) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Snake) GetHeadType() string {
	if m != nil {
		return m.HeadType
	}
	return ""
}

func (m *Snake) GetTailType() string {
	if m != nil {
		return m.TailType
	}
	return ""
}

type Death struct {
	Cause string `protobuf:"bytes,1,opt,name=Cause,proto3" json:"Cause,omitempty"`
	Turn  int32  `protobuf:"varint,2,opt,name=Turn,proto3" json:"Turn,omitempty"`
}

func (m *Death) Reset()                    { *m = Death{} }
func (m *Death) String() string            { return proto.CompactTextString(m) }
func (*Death) ProtoMessage()               {}
func (*Death) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{25} }

func (m *Death) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *Death) GetTurn() int32 {
	if m != nil {
		return m.Turn
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidateSnakeRequest)(nil), "pb.ValidateSnakeRequest")
	proto.RegisterType((*ValidateSnakeResponse)(nil), "pb.ValidateSnakeResponse")
	proto.RegisterType((*SnakeResponseStatus)(nil), "pb.SnakeResponseStatus")
	proto.RegisterType((*Score)(nil), "pb.Score")
	proto.RegisterType((*PopRequest)(nil), "pb.PopRequest")
	proto.RegisterType((*PopResponse)(nil), "pb.PopResponse")
	proto.RegisterType((*StatusRequest)(nil), "pb.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "pb.StatusResponse")
	proto.RegisterType((*StartRequest)(nil), "pb.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "pb.StartResponse")
	proto.RegisterType((*CreateRequest)(nil), "pb.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "pb.CreateResponse")
	proto.RegisterType((*AddGameFrameRequest)(nil), "pb.AddGameFrameRequest")
	proto.RegisterType((*AddGameFrameResponse)(nil), "pb.AddGameFrameResponse")
	proto.RegisterType((*ListGameFramesRequest)(nil), "pb.ListGameFramesRequest")
	proto.RegisterType((*ListGameFramesResponse)(nil), "pb.ListGameFramesResponse")
	proto.RegisterType((*EndGameRequest)(nil), "pb.EndGameRequest")
	proto.RegisterType((*EndGameResponse)(nil), "pb.EndGameResponse")
	proto.RegisterType((*PingRequest)(nil), "pb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "pb.PingResponse")
	proto.RegisterType((*SnakeOptions)(nil), "pb.SnakeOptions")
	proto.RegisterType((*Game)(nil), "pb.Game")
	proto.RegisterType((*GameFrame)(nil), "pb.GameFrame")
	proto.RegisterType((*Point)(nil), "pb.Point")
	proto.RegisterType((*Snake)(nil), "pb.Snake")
	proto.RegisterType((*Death)(nil), "pb.Death")
}
func (this *ValidateSnakeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateSnakeRequest)
	if !ok {
		that2, ok := that.(ValidateSnakeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *ValidateSnakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateSnakeResponse)
	if !ok {
		that2, ok := that.(ValidateSnakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartStatus.Equal(that1.StartStatus) {
		return false
	}
	if !this.MoveStatus.Equal(that1.MoveStatus) {
		return false
	}
	if !this.EndStatus.Equal(that1.EndStatus) {
		return false
	}
	if !this.PingStatus.Equal(that1.PingStatus) {
		return false
	}
	return true
}
func (this *SnakeResponseStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnakeResponseStatus)
	if !ok {
		that2, ok := that.(SnakeResponseStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Raw != that1.Raw {
		return false
	}
	if this.StatusCode != that1.StatusCode {
		return false
	}
	if !this.Score.Equal(that1.Score) {
		return false
	}
	return true
}
func (this *Score) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Score)
	if !ok {
		that2, ok := that.(Score)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChecksPassed != that1.ChecksPassed {
		return false
	}
	if this.ChecksFailed != that1.ChecksFailed {
		return false
	}
	return true
}
func (this *PopRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PopRequest)
	if !ok {
		that2, ok := that.(PopRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PopResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PopResponse)
	if !ok {
		that2, ok := that.(PopResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *StatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Game.Equal(that1.Game) {
		return false
	}
	if !this.LastFrame.Equal(that1.LastFrame) {
		return false
	}
	return true
}
func (this *StartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartRequest)
	if !ok {
		that2, ok := that.(StartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *StartResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartResponse)
	if !ok {
		that2, ok := that.(StartResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Food != that1.Food {
		return false
	}
	if len(this.Snakes) != len(that1.Snakes) {
		return false
	}
	for i := range this.Snakes {
		if !this.Snakes[i].Equal(that1.Snakes[i]) {
			return false
		}
	}
	if this.MaxTurnsToNextFoodSpawn != that1.MaxTurnsToNextFoodSpawn {
		return false
	}
	if this.SnakeTimeout != that1.SnakeTimeout {
		return false
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *AddGameFrameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameFrameRequest)
	if !ok {
		that2, ok := that.(AddGameFrameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.GameFrame.Equal(that1.GameFrame) {
		return false
	}
	return true
}
func (this *AddGameFrameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameFrameResponse)
	if !ok {
		that2, ok := that.(AddGameFrameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Game.Equal(that1.Game) {
		return false
	}
	return true
}
func (this *ListGameFramesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGameFramesRequest)
	if !ok {
		that2, ok := that.(ListGameFramesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListGameFramesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGameFramesResponse)
	if !ok {
		that2, ok := that.(ListGameFramesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Frames) != len(that1.Frames) {
		return false
	}
	for i := range this.Frames {
		if !this.Frames[i].Equal(that1.Frames[i]) {
			return false
		}
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *EndGameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndGameRequest)
	if !ok {
		that2, ok := that.(EndGameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *EndGameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndGameResponse)
	if !ok {
		that2, ok := that.(EndGameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *SnakeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnakeOptions)
	if !ok {
		that2, ok := that.(SnakeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.HeadType != that1.HeadType {
		return false
	}
	if this.TailType != that1.TailType {
		return false
	}
	return true
}
func (this *Game) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Game)
	if !ok {
		that2, ok := that.(Game)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.SnakeTimeout != that1.SnakeTimeout {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.MaxTurnsToNextFoodSpawn != that1.MaxTurnsToNextFoodSpawn {
		return false
	}
	if this.TurnsSinceLastFoodSpawn != that1.TurnsSinceLastFoodSpawn {
		return false
	}
	return true
}
func (this *GameFrame) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameFrame)
	if !ok {
		that2, ok := that.(GameFrame)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Turn != that1.Turn {
		return false
	}
	if len(this.Food) != len(that1.Food) {
		return false
	}
	for i := range this.Food {
		if !this.Food[i].Equal(that1.Food[i]) {
			return false
		}
	}
	if len(this.Snakes) != len(that1.Snakes) {
		return false
	}
	for i := range this.Snakes {
		if !this.Snakes[i].Equal(that1.Snakes[i]) {
			return false
		}
	}
	return true
}
func (this *Point) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Point)
	if !ok {
		that2, ok := that.(Point)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Snake) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Snake)
	if !ok {
		that2, ok := that.(Snake)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Body) != len(that1.Body) {
		return false
	}
	for i := range this.Body {
		if !this.Body[i].Equal(that1.Body[i]) {
			return false
		}
	}
	if this.Health != that1.Health {
		return false
	}
	if !this.Death.Equal(that1.Death) {
		return false
	}
	if this.Color != that1.Color {
		return false
	}
	if this.HeadType != that1.HeadType {
		return false
	}
	if this.TailType != that1.TailType {
		return false
	}
	return true
}
func (this *Death) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Death)
	if !ok {
		that2, ok := that.(Death)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.Turn != that1.Turn {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	// Pop should pop a game that is unlocked and unfinished from the queue, lock
	// the game and return it to the worker to begin processing. This call will
	// be polled by the workers.
	Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
	// Status retrieves the game state including the last processed game frame.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Start starts the game running, and will make it ready to be picked up by a
	// worker.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Create creates a new game, but doesn't start running frames.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// AddGameFrame adds a new game frame to the game. A lock must be held for this
	// call to succeed.
	AddGameFrame(ctx context.Context, in *AddGameFrameRequest, opts ...grpc.CallOption) (*AddGameFrameResponse, error)
	// ListGameFrames will list all game frames given a limit and offset.
	ListGameFrames(ctx context.Context, in *ListGameFramesRequest, opts ...grpc.CallOption) (*ListGameFramesResponse, error)
	// EndGame sets the game status to complete. A lock must be held for this call
	// to succeed.
	EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*EndGameResponse, error)
	// ping will ping the controller.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// ValidateSnake will call a snake URL and return stats about it's validity.
	ValidateSnake(ctx context.Context, in *ValidateSnakeRequest, opts ...grpc.CallOption) (*ValidateSnakeResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	out := new(PopResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Pop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddGameFrame(ctx context.Context, in *AddGameFrameRequest, opts ...grpc.CallOption) (*AddGameFrameResponse, error) {
	out := new(AddGameFrameResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/AddGameFrame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListGameFrames(ctx context.Context, in *ListGameFramesRequest, opts ...grpc.CallOption) (*ListGameFramesResponse, error) {
	out := new(ListGameFramesResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/ListGameFrames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*EndGameResponse, error) {
	out := new(EndGameResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/EndGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ValidateSnake(ctx context.Context, in *ValidateSnakeRequest, opts ...grpc.CallOption) (*ValidateSnakeResponse, error) {
	out := new(ValidateSnakeResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/ValidateSnake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// Pop should pop a game that is unlocked and unfinished from the queue, lock
	// the game and return it to the worker to begin processing. This call will
	// be polled by the workers.
	Pop(context.Context, *PopRequest) (*PopResponse, error)
	// Status retrieves the game state including the last processed game frame.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Start starts the game running, and will make it ready to be picked up by a
	// worker.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Create creates a new game, but doesn't start running frames.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// AddGameFrame adds a new game frame to the game. A lock must be held for this
	// call to succeed.
	AddGameFrame(context.Context, *AddGameFrameRequest) (*AddGameFrameResponse, error)
	// ListGameFrames will list all game frames given a limit and offset.
	ListGameFrames(context.Context, *ListGameFramesRequest) (*ListGameFramesResponse, error)
	// EndGame sets the game status to complete. A lock must be held for this call
	// to succeed.
	EndGame(context.Context, *EndGameRequest) (*EndGameResponse, error)
	// ping will ping the controller.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// ValidateSnake will call a snake URL and return stats about it's validity.
	ValidateSnake(context.Context, *ValidateSnakeRequest) (*ValidateSnakeResponse, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Pop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddGameFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddGameFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/AddGameFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddGameFrame(ctx, req.(*AddGameFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListGameFrames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameFramesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListGameFrames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/ListGameFrames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListGameFrames(ctx, req.(*ListGameFramesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/EndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).EndGame(ctx, req.(*EndGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ValidateSnake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSnakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ValidateSnake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/ValidateSnake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ValidateSnake(ctx, req.(*ValidateSnakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pop",
			Handler:    _Controller_Pop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Controller_Status_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Controller_Start_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Controller_Create_Handler,
		},
		{
			MethodName: "AddGameFrame",
			Handler:    _Controller_AddGameFrame_Handler,
		},
		{
			MethodName: "ListGameFrames",
			Handler:    _Controller_ListGameFrames_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _Controller_EndGame_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Controller_Ping_Handler,
		},
		{
			MethodName: "ValidateSnake",
			Handler:    _Controller_ValidateSnake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func NewPopulatedValidateSnakeRequest(r randyController, easy bool) *ValidateSnakeRequest {
	this := &ValidateSnakeRequest{}
	this.URL = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedValidateSnakeResponse(r randyController, easy bool) *ValidateSnakeResponse {
	this := &ValidateSnakeResponse{}
	if r.Intn(10) != 0 {
		this.StartStatus = NewPopulatedSnakeResponseStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MoveStatus = NewPopulatedSnakeResponseStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.EndStatus = NewPopulatedSnakeResponseStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PingStatus = NewPopulatedSnakeResponseStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSnakeResponseStatus(r randyController, easy bool) *SnakeResponseStatus {
	this := &SnakeResponseStatus{}
	this.Message = string(randStringController(r))
	v1 := r.Intn(10)
	this.Errors = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Errors[i] = string(randStringController(r))
	}
	this.Time = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Time *= -1
	}
	this.Raw = string(randStringController(r))
	this.StatusCode = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.StatusCode *= -1
	}
	if r.Intn(10) != 0 {
		this.Score = NewPopulatedScore(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedScore(r randyController, easy bool) *Score {
	this := &Score{}
	this.ChecksPassed = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ChecksPassed *= -1
	}
	this.ChecksFailed = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ChecksFailed *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPopRequest(r randyController, easy bool) *PopRequest {
	this := &PopRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPopResponse(r randyController, easy bool) *PopResponse {
	this := &PopResponse{}
	this.ID = string(randStringController(r))
	this.Token = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusRequest(r randyController, easy bool) *StatusRequest {
	this := &StatusRequest{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusResponse(r randyController, easy bool) *StatusResponse {
	this := &StatusResponse{}
	if r.Intn(10) != 0 {
		this.Game = NewPopulatedGame(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastFrame = NewPopulatedGameFrame(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStartRequest(r randyController, easy bool) *StartRequest {
	this := &StartRequest{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStartResponse(r randyController, easy bool) *StartResponse {
	this := &StartResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateRequest(r randyController, easy bool) *CreateRequest {
	this := &CreateRequest{}
	this.Width = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Height = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.Food = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Food *= -1
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Snakes = make([]*SnakeOptions, v2)
		for i := 0; i < v2; i++ {
			this.Snakes[i] = NewPopulatedSnakeOptions(r, easy)
		}
	}
	this.MaxTurnsToNextFoodSpawn = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxTurnsToNextFoodSpawn *= -1
	}
	this.SnakeTimeout = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SnakeTimeout *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateResponse(r randyController, easy bool) *CreateResponse {
	this := &CreateResponse{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAddGameFrameRequest(r randyController, easy bool) *AddGameFrameRequest {
	this := &AddGameFrameRequest{}
	this.ID = string(randStringController(r))
	if r.Intn(10) != 0 {
		this.GameFrame = NewPopulatedGameFrame(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAddGameFrameResponse(r randyController, easy bool) *AddGameFrameResponse {
	this := &AddGameFrameResponse{}
	if r.Intn(10) != 0 {
		this.Game = NewPopulatedGame(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGameFramesRequest(r randyController, easy bool) *ListGameFramesRequest {
	this := &ListGameFramesRequest{}
	this.ID = string(randStringController(r))
	this.Limit = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	this.Offset = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGameFramesResponse(r randyController, easy bool) *ListGameFramesResponse {
	this := &ListGameFramesResponse{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Frames = make([]*GameFrame, v3)
		for i := 0; i < v3; i++ {
			this.Frames[i] = NewPopulatedGameFrame(r, easy)
		}
	}
	this.Count = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndGameRequest(r randyController, easy bool) *EndGameRequest {
	this := &EndGameRequest{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndGameResponse(r randyController, easy bool) *EndGameResponse {
	this := &EndGameResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPingRequest(r randyController, easy bool) *PingRequest {
	this := &PingRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPingResponse(r randyController, easy bool) *PingResponse {
	this := &PingResponse{}
	this.Version = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSnakeOptions(r randyController, easy bool) *SnakeOptions {
	this := &SnakeOptions{}
	this.Name = string(randStringController(r))
	this.URL = string(randStringController(r))
	this.ID = string(randStringController(r))
	this.HeadType = string(randStringController(r))
	this.TailType = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGame(r randyController, easy bool) *Game {
	this := &Game{}
	this.ID = string(randStringController(r))
	this.Status = string(randStringController(r))
	this.Width = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Height = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.SnakeTimeout = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SnakeTimeout *= -1
	}
	this.Mode = string(randStringController(r))
	this.MaxTurnsToNextFoodSpawn = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxTurnsToNextFoodSpawn *= -1
	}
	this.TurnsSinceLastFoodSpawn = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TurnsSinceLastFoodSpawn *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGameFrame(r randyController, easy bool) *GameFrame {
	this := &GameFrame{}
	this.Turn = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Turn *= -1
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Food = make([]*Point, v4)
		for i := 0; i < v4; i++ {
			this.Food[i] = NewPopulatedPoint(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Snakes = make([]*Snake, v5)
		for i := 0; i < v5; i++ {
			this.Snakes[i] = NewPopulatedSnake(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPoint(r randyController, easy bool) *Point {
	this := &Point{}
	this.X = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Y = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Y *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSnake(r randyController, easy bool) *Snake {
	this := &Snake{}
	this.ID = string(randStringController(r))
	this.Name = string(randStringController(r))
	this.URL = string(randStringController(r))
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Body = make([]*Point, v6)
		for i := 0; i < v6; i++ {
			this.Body[i] = NewPopulatedPoint(r, easy)
		}
	}
	this.Health = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Health *= -1
	}
	if r.Intn(10) != 0 {
		this.Death = NewPopulatedDeath(r, easy)
	}
	this.Color = string(randStringController(r))
	this.HeadType = string(randStringController(r))
	this.TailType = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeath(r randyController, easy bool) *Death {
	this := &Death{}
	this.Cause = string(randStringController(r))
	this.Turn = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Turn *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyController interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneController(r randyController) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringController(r randyController) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneController(r)
	}
	return string(tmps)
}
func randUnrecognizedController(r randyController, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldController(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldController(dAtA []byte, r randyController, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateController(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateController(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateController(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("controller.proto", fileDescriptorController) }

var fileDescriptorController = []byte{
	// 1101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xd6, 0x7a, 0xe3, 0x24, 0x3e, 0x71, 0x1c, 0x67, 0x92, 0xb6, 0xee, 0x0a, 0xd2, 0x32, 0x08,
	0x14, 0x04, 0x24, 0x22, 0x05, 0x01, 0x97, 0x6d, 0xd2, 0xa4, 0x48, 0x49, 0x13, 0x6d, 0xdc, 0xd2,
	0xc2, 0xd5, 0xda, 0x3b, 0xb1, 0x57, 0x71, 0x76, 0xcc, 0xee, 0x9a, 0xb6, 0x12, 0x0f, 0xc0, 0xa3,
	0x70, 0xc5, 0x35, 0xaf, 0xc2, 0x25, 0xf0, 0x0c, 0x48, 0x48, 0xdc, 0x30, 0x73, 0xe6, 0xec, 0x9f,
	0xbd, 0x36, 0xbd, 0xb0, 0x35, 0xe7, 0x77, 0xce, 0x9c, 0xf3, 0xcd, 0x37, 0x0b, 0xed, 0xbe, 0x0c,
	0x93, 0x48, 0x8e, 0x46, 0x22, 0xda, 0x1b, 0x47, 0x32, 0x91, 0xac, 0x36, 0xee, 0x39, 0x9f, 0x0e,
	0x82, 0x64, 0x38, 0xe9, 0xed, 0xf5, 0xe5, 0xcd, 0xfe, 0x40, 0x0e, 0xe4, 0x3e, 0x9a, 0x7a, 0x93,
	0x2b, 0x94, 0x50, 0xc0, 0x95, 0x09, 0xe1, 0xbb, 0xb0, 0xfd, 0xdc, 0x1b, 0x05, 0xbe, 0x97, 0x88,
	0xcb, 0xd0, 0xbb, 0x16, 0xae, 0xf8, 0x61, 0x22, 0xe2, 0x84, 0xb5, 0xc1, 0x7e, 0xe6, 0x9e, 0x76,
	0xac, 0xfb, 0xd6, 0x6e, 0xc3, 0xd5, 0x4b, 0xfe, 0xaf, 0x05, 0xb7, 0xa6, 0x5c, 0xe3, 0xb1, 0x0c,
	0x63, 0xc1, 0xbe, 0x86, 0xb5, 0xcb, 0xc4, 0x8b, 0x12, 0xf5, 0x97, 0x4c, 0x62, 0x8c, 0x59, 0x3b,
	0xb8, 0xb3, 0x37, 0xee, 0xed, 0x95, 0xfc, 0x8c, 0xd9, 0x2d, 0xfa, 0xb2, 0x2f, 0x01, 0xce, 0xe4,
	0x8f, 0x64, 0xea, 0xd4, 0x16, 0x47, 0x16, 0x5c, 0xd9, 0x17, 0xd0, 0x78, 0x1c, 0xfa, 0x14, 0x67,
	0x2f, 0x8e, 0xcb, 0x3d, 0xf5, 0x7e, 0x17, 0x41, 0x38, 0xa0, 0xb8, 0xa5, 0xff, 0xd9, 0x2f, 0x77,
	0xe5, 0xbf, 0x5a, 0xb0, 0x55, 0xe1, 0xc3, 0x3a, 0xb0, 0x72, 0x26, 0xe2, 0xd8, 0x1b, 0x08, 0xea,
	0x55, 0x2a, 0xb2, 0xdb, 0xb0, 0xfc, 0x38, 0x8a, 0x64, 0xa4, 0x8f, 0x65, 0x2b, 0x03, 0x49, 0x8c,
	0xc1, 0x52, 0x12, 0xdc, 0x08, 0x2c, 0xba, 0xee, 0xe2, 0x5a, 0x77, 0x3b, 0xf2, 0x5e, 0x61, 0x3d,
	0xaa, 0xdb, 0x6a, 0xc9, 0x76, 0x00, 0x62, 0xdc, 0xe1, 0x50, 0xfa, 0xa2, 0x53, 0x47, 0xdf, 0x82,
	0x86, 0xdd, 0x83, 0x7a, 0xdc, 0x97, 0x91, 0xe8, 0x2c, 0xe3, 0x19, 0x1a, 0x78, 0x06, 0xad, 0x70,
	0x8d, 0x9e, 0x9f, 0x43, 0x1d, 0x65, 0xc6, 0xa1, 0xd9, 0x1f, 0x8a, 0xfe, 0x75, 0x7c, 0xe1, 0xc5,
	0xb1, 0xf0, 0xb1, 0xcc, 0xba, 0x5b, 0xd2, 0xe5, 0x3e, 0xc7, 0x5e, 0x30, 0x52, 0x3e, 0xb5, 0xa2,
	0x8f, 0xd1, 0xf1, 0xa6, 0x6a, 0x9d, 0x1c, 0x13, 0x3e, 0xf8, 0x03, 0x58, 0x43, 0x89, 0x20, 0xd0,
	0x82, 0xda, 0x37, 0x47, 0xd4, 0x01, 0xb5, 0x62, 0xdb, 0x50, 0xef, 0xca, 0x6b, 0x11, 0x62, 0xa6,
	0x86, 0x6b, 0x04, 0x7e, 0x0f, 0xd6, 0xa9, 0xb5, 0x84, 0xb2, 0xa9, 0x30, 0xfe, 0x3d, 0xb4, 0x52,
	0x07, 0x4a, 0xfc, 0x0e, 0x2c, 0x9d, 0x78, 0x37, 0x82, 0x40, 0xb5, 0xaa, 0x8f, 0xa9, 0x65, 0x17,
	0xb5, 0xec, 0x63, 0x68, 0x9c, 0x7a, 0x71, 0x72, 0x1c, 0x69, 0x17, 0x83, 0x9e, 0xf5, 0xd4, 0x05,
	0x95, 0x6e, 0x6e, 0xe7, 0x3b, 0xd0, 0x44, 0xe8, 0xcd, 0xdb, 0x7c, 0x03, 0xab, 0xd3, 0x76, 0xb3,
	0x37, 0xff, 0xdd, 0x82, 0xf5, 0xc3, 0x48, 0x28, 0xbc, 0xa7, 0x21, 0xea, 0x58, 0xdf, 0x06, 0x7e,
	0x32, 0xa4, 0x26, 0x1a, 0x41, 0x4f, 0xfa, 0x89, 0x08, 0x06, 0xc3, 0x84, 0xfa, 0x46, 0x92, 0x9e,
	0xf4, 0xb1, 0x94, 0x7e, 0x3a, 0x69, 0xbd, 0x66, 0xbb, 0xb0, 0x8c, 0x30, 0xd2, 0xe0, 0xb3, 0x55,
	0xb9, 0xed, 0x0c, 0x7c, 0xe7, 0xe3, 0x24, 0x50, 0xdb, 0xba, 0x64, 0x67, 0x5f, 0xc1, 0x9d, 0x33,
	0xef, 0x75, 0x77, 0x12, 0x85, 0x71, 0x57, 0x3e, 0x15, 0xaf, 0x13, 0x1d, 0x7f, 0x39, 0xf6, 0x5e,
	0x85, 0x04, 0x87, 0x79, 0x66, 0x3d, 0x4d, 0xcc, 0xd1, 0x55, 0xd0, 0x92, 0x93, 0x04, 0x21, 0xa2,
	0xa6, 0x59, 0xd4, 0xf1, 0xfb, 0xd0, 0x4a, 0x8f, 0x56, 0x3d, 0x42, 0xee, 0xc2, 0xd6, 0x43, 0xdf,
	0xcf, 0x3b, 0x59, 0xdd, 0x35, 0x3d, 0x82, 0xcc, 0x67, 0xce, 0x08, 0xb2, 0x25, 0xff, 0x1c, 0xb6,
	0xcb, 0x39, 0xf3, 0x29, 0x0f, 0x2a, 0xa7, 0xac, 0xb5, 0xfc, 0x19, 0xdc, 0x3a, 0x0d, 0xe2, 0x24,
	0x0b, 0x9b, 0x07, 0x1f, 0x3d, 0x9e, 0xd3, 0xe0, 0x26, 0x48, 0xe7, 0x60, 0x04, 0x3d, 0x9e, 0xf3,
	0xab, 0xab, 0x58, 0x24, 0x34, 0x08, 0x92, 0x54, 0xda, 0xdb, 0xd3, 0x69, 0xa9, 0x9c, 0x0f, 0x60,
	0xd9, 0x68, 0x54, 0x6e, 0x7b, 0xf6, 0x40, 0x64, 0xd4, 0xdb, 0x1d, 0xca, 0x49, 0x98, 0x6d, 0x87,
	0x82, 0xee, 0xac, 0xe2, 0x9b, 0x93, 0xf9, 0x2d, 0xe3, 0x9b, 0xb0, 0x91, 0x79, 0x10, 0xd4, 0xd6,
	0xd5, 0x75, 0x52, 0x64, 0x93, 0xde, 0xae, 0x5d, 0x68, 0x1a, 0x91, 0x0a, 0x52, 0x2c, 0xf3, 0x5c,
	0x44, 0xb1, 0xc2, 0x47, 0xca, 0x32, 0x24, 0xf2, 0x9f, 0x68, 0xd6, 0x84, 0x1e, 0x8d, 0xb9, 0xa7,
	0x69, 0x27, 0x1b, 0x2e, 0xae, 0x53, 0x2e, 0xaf, 0x65, 0x5c, 0x4e, 0x15, 0xd9, 0x59, 0xe3, 0x1c,
	0x58, 0x7d, 0x22, 0x3c, 0xbf, 0xfb, 0x66, 0x2c, 0x88, 0x84, 0x32, 0x59, 0xdb, 0xba, 0x8a, 0x01,
	0xd0, 0x56, 0x37, 0xb6, 0x54, 0xe6, 0x3f, 0xd7, 0xcc, 0xf5, 0x9c, 0x99, 0x84, 0xea, 0x79, 0x81,
	0xd3, 0x15, 0xf9, 0x11, 0x5d, 0x66, 0x17, 0xc8, 0xae, 0xbe, 0x40, 0x4b, 0xa5, 0x0b, 0xf4, 0x16,
	0x40, 0xd6, 0x07, 0x3e, 0xd3, 0x14, 0xb9, 0x6a, 0x0e, 0xac, 0xd7, 0x8b, 0xae, 0x4e, 0x63, 0xf1,
	0xd5, 0x51, 0x91, 0xa8, 0xbf, 0x0c, 0xc2, 0xbe, 0x40, 0xea, 0xc8, 0x22, 0xc1, 0x44, 0xce, 0x31,
	0x73, 0xaf, 0x70, 0x0f, 0x74, 0x51, 0xda, 0x8f, 0x68, 0x02, 0xd7, 0xec, 0x5d, 0x62, 0x83, 0x1a,
	0x42, 0x0a, 0x09, 0xfb, 0x42, 0x06, 0x61, 0x42, 0xc4, 0xf0, 0x5e, 0x46, 0x0c, 0x76, 0xee, 0x60,
	0x5e, 0x1c, 0x32, 0xf0, 0xf7, 0xa1, 0x8e, 0x11, 0xac, 0x09, 0xd6, 0x0b, 0xca, 0x6d, 0xbd, 0xd0,
	0xd2, 0x4b, 0x82, 0xa0, 0xf5, 0x92, 0xff, 0x65, 0x29, 0xe2, 0xd7, 0xfe, 0x33, 0x33, 0x49, 0xa1,
	0x51, 0x9b, 0x85, 0x86, 0x9d, 0x43, 0x43, 0x95, 0xf9, 0x48, 0xfa, 0x6f, 0x88, 0x9e, 0x8a, 0x65,
	0x6a, 0xb5, 0x19, 0x95, 0x37, 0x52, 0x13, 0xac, 0xa7, 0xa3, 0xd2, 0x92, 0x7e, 0x8f, 0x8e, 0x14,
	0x9d, 0x0c, 0x8b, 0xef, 0x11, 0x2a, 0x5c, 0xa3, 0x37, 0x97, 0x65, 0x24, 0xa3, 0xce, 0x8a, 0x79,
	0x11, 0x50, 0x28, 0x01, 0x6f, 0x75, 0x01, 0xf0, 0x1a, 0x53, 0xc0, 0xfb, 0x0c, 0x0a, 0x69, 0xbd,
	0x49, 0x9c, 0x02, 0xde, 0x08, 0x59, 0xff, 0x6b, 0x79, 0xff, 0x0f, 0xfe, 0xb6, 0x01, 0x0e, 0xb3,
	0x2f, 0x26, 0xf6, 0x21, 0xd8, 0xea, 0x01, 0x63, 0x2d, 0x73, 0xc0, 0xf4, 0x5d, 0x73, 0x36, 0x32,
	0x99, 0xae, 0xde, 0x7e, 0x8a, 0x64, 0xb6, 0x89, 0x13, 0x29, 0xbe, 0x5f, 0x0e, 0x2b, 0xaa, 0x28,
	0xe0, 0x13, 0xd5, 0x7f, 0xfd, 0x8c, 0xb0, 0x36, 0x19, 0xb3, 0x17, 0xc7, 0xd9, 0x2c, 0x68, 0xf2,
	0xf4, 0x86, 0x87, 0x4d, 0xfa, 0xd2, 0x73, 0x63, 0xd2, 0x4f, 0xd1, 0xf4, 0x43, 0x68, 0x16, 0x29,
	0x94, 0xe1, 0xd7, 0x4b, 0x05, 0x51, 0x3b, 0x9d, 0x59, 0x03, 0xa5, 0x38, 0x81, 0x56, 0x99, 0xf8,
	0xd8, 0x5d, 0xed, 0x5b, 0xc9, 0xb1, 0x8e, 0x53, 0x65, 0xa2, 0x44, 0x07, 0xb0, 0x42, 0x44, 0xc6,
	0xb0, 0xd4, 0x32, 0xef, 0x39, 0x5b, 0x25, 0x1d, 0xc5, 0x7c, 0x04, 0x4b, 0x9a, 0xda, 0x98, 0x69,
	0x74, 0xce, 0x79, 0x4e, 0x3b, 0x57, 0x90, 0xeb, 0x11, 0xac, 0x97, 0x3e, 0x38, 0x19, 0x1e, 0xa9,
	0xea, 0x73, 0xd5, 0xb9, 0x5b, 0x61, 0x31, 0x59, 0x1e, 0xb5, 0xff, 0xf9, 0x63, 0xc7, 0xfa, 0xe5,
	0xcf, 0x1d, 0xeb, 0x37, 0xf5, 0xfb, 0x4e, 0x7d, 0x22, 0xf7, 0x96, 0xf1, 0xd3, 0xf7, 0xc1, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xac, 0x63, 0x2d, 0xbc, 0x41, 0x0b, 0x00, 0x00,
}
