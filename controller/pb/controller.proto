 syntax = "proto3";
package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.testgen_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;
option go_package = "pb";

// The controller is the data storage layer and configures sending work to the
// individual workers. The key workflow that a game goes through is as follows:
// 1. Create is called (from the api).
// 2. Start is called (from the api).
// 3. Pop is called by the worker, since the game is started and unlocked, the
//    active game id is returned to the worker in this call. The game is also
//    locked internally to the controller at this point.
// 4. The worker initiates work and begins pushing game frames through
//    AddGameFrame. If a game frame is not pushed within controller.LockInterval
//    then the game will become available for other workers.
// 5. Once work is finished, the worker will call EndGame which will unlock the
//    game.
//
// The data model for the store includes the following components:
//
// Game:
// A game is an immutable model that describes the configuration of the specific
// game. Timeouts and board size are stored on the game. If you need to change
// board size clone the game and start a new one.
//
// GameFrame:
// Game frames point to a game and effectively represent the history of a game.
// Frames are pushed continually by workers through the controller interface into
// the store.
//
// GameLock:
// However, only one worker is allowed to push a frame at one time, otherwise the
// game frames would be in a weird order.
service Controller {
  // Pop should pop a game that is unlocked and unfinished from the queue, lock
  // the game and return it to the worker to begin processing. This call will
  // be polled by the workers.
  rpc Pop(PopRequest) returns (PopResponse);
  // Status retrieves the game state including the last processed game frame.
  rpc Status(StatusRequest) returns (StatusResponse);
  // Start starts the game running, and will make it ready to be picked up by a
  // worker.
  rpc Start(StartRequest) returns (StartResponse);
  // Create creates a new game, but doesn't start running frames.
  rpc Create(CreateRequest) returns (CreateResponse);
  // AddGameFrame adds a new game frame to the game. A lock must be held for this
  // call to succeed.
  rpc AddGameFrame(AddGameFrameRequest) returns (AddGameFrameResponse);
  // ListGameFrames will list all game frames given a limit and offset.
  rpc ListGameFrames(ListGameFramesRequest) returns (ListGameFramesResponse);
  // EndGame sets the game status to complete. A lock must be held for this call
  // to succeed.
  rpc EndGame(EndGameRequest) returns (EndGameResponse);
  // ping will ping the controller.
  rpc Ping(PingRequest) returns (PingResponse);
  // ValidateSnake will call a snake URL and return stats about it's validity.
  rpc ValidateSnake(ValidateSnakeRequest) returns (ValidateSnakeResponse);
}

message ValidateSnakeRequest { string URL = 1; }
message ValidateSnakeResponse {
   SnakeResponseStatus StartStatus = 1;
   SnakeResponseStatus MoveStatus = 2;
   SnakeResponseStatus EndStatus = 3;
   SnakeResponseStatus PingStatus = 4;
}
message SnakeResponseStatus {
  string Message = 1;
  repeated string Errors = 2;
  int32 time = 3;
  string raw = 4;
  int32 statusCode = 5;
  Score score = 6;
}
 message Score {
   int32 checksPassed = 1;
   int32 checksFailed = 2;
 }
message PopRequest  {}
message PopResponse {
  string ID = 1;
  string Token = 2;
}

message StatusRequest  { string ID = 1; }
message StatusResponse {
  Game Game = 1;
  GameFrame LastFrame = 2;
}

message StartRequest  { string ID = 1; }
message StartResponse {}

message CreateRequest  {
  int32 Width = 1;
  int32 Height = 2;
  int32 Food = 3;
  repeated SnakeOptions Snakes = 4;
  int32 MaxTurnsToNextFoodSpawn = 5;
  int32 SnakeTimeout = 6;
}
message CreateResponse {
  string ID = 1;
}

message AddGameFrameRequest {
  string ID = 1;
  GameFrame GameFrame = 2;
}
message AddGameFrameResponse { Game game = 1; }

message ListGameFramesRequest {
  string ID = 1;
  int32 Limit = 2;
  int32 Offset = 3;
}
message ListGameFramesResponse {
  repeated GameFrame Frames = 1;
  int32 Count = 2;
}

message EndGameRequest  { string ID = 1; }
message EndGameResponse {}

message PingRequest {}
message PingResponse { string Version = 1; }

message SnakeOptions {
  string Name = 1;
  string URL = 2;
  string ID = 3;
  string HeadType = 4;
  string TailType = 5;
}

message Game {
  string ID = 1;
  string Status = 2;
  int32 Width = 3;
  int32 Height = 4;
  int32 SnakeTimeout = 6; // number of milliseconds for snake api calls
  string Mode = 8;
  int32 MaxTurnsToNextFoodSpawn = 9;
  int32 TurnsSinceLastFoodSpawn = 10;
  string TickInterceptURL = 11;
}

message GameFrame {
  int32 Turn = 1;
  repeated Point Food = 2;
  repeated Snake Snakes = 3;
}

message Point {
  int32 X = 1;
  int32 Y = 2;
}

message Snake {
  string ID = 1;
  string Name = 2;
  string URL = 3;
  repeated Point Body = 4;
  int32 Health = 5;
  Death Death = 6;
  string Color = 7;
  string HeadType = 8;
  string TailType = 9;
}

message Death {
  string Cause = 1;
  int32 Turn = 2;
}
